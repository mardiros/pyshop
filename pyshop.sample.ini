[app:main]
use = egg:pyshop

pyramid.reload_templates = false
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =
    pyramid_filterwarnings
    pyramid_tm
    pyramid_jinja2
    pyshop
#   pyramid_debugtoolbar
# this plugin is not configurable
# waiting for a pull request on gihub
#    pyramid_xmlrpc

filterwarnings.action = ignore

jinja2.directories = pyshop:templates
jinja2.i18n.domain = pyshop

sqlalchemy.url = sqlite:///%(here)s/pyshop.db
sqlalchemy.echo = 0

tm.commit_veto = pyramid_tm.default_commit_veto

# waiting for https://github.com/Pylons/pyramid_xmlrpc/pull/2
xmlrpc.encoding = utf-8
xmlrpc.allow_none = True
xmlrpc.datetime = True

# pyshop options


# Path to the cheeseshop to mirror
pyshop.pypi.url = https://pypi.python.org/pypi
# If you run pyshop on a server that must use a proxy to connect
# to PyPI, set environment variable http_proxy/https_proxy.

# XXX At the moment, PyPI support only HTTP/1.1, ensure your proxy
# support it to works correctly
# See http://mail.python.org/pipermail/distutils-sig/2013-May/020884.html

# Path to the repository that store mirrored release file.
pyshop.repository = %(here)s/repository/

# If set to 1, pyshop do not mirror release that
# have a bad version number, defined by the regex ``pyshop.sanitize.regex``
pyshop.upload.sanitize = 1
pyshop.upload.sanitize.regex = ^(?P<version>\d+\.\d+)(?P<extraversion>(?:\.\d+)*)(?:(?P<prerel>[abc]|rc)(?P<prerelversion>\d+(?:\.\d+)*))?(?P<postdev>(\.post(?P<post>\d+))?(\.dev(?P<dev>\d+))?)?$
# uncomment to disable this behaviour
pyshop.upload.rewrite_filename = 0
# Change the endpoint used by setup.py sdist upload
#pyshop.upload.route = /simple/

pyshop.mirror.cache.ttl = 24
pyshop.mirror.sanitize = 0
pyshop.mirror.sanitize.regex = ^[0-9]+(\.[0-9]+)*([a-f][0-9]*)?$

# build_egg will create a binary format of the mirrored version
# this can be usefull if you don't want to compile package
# Uncomment to activate this feature
# pyshop.mirror.wheelify = 1


# may pyshop use LDAP authentification
pyshop.ldap.use_for_auth = False
# type of ldap in ldap, ldaps
pyshop.ldap.type = ldap
# TLS certificate requestchecks in DEMAND, NEVER, ALLOW, TRY, HARD
pyshop.ldap.certreq = 
# the host of the LDAP server
pyshop.ldap.host = 
# the port 389 by default
pyshop.ldap.port = 
# if we need to connect before quering 
# ex : cn=manager,dc=example,dc=com
pyshop.ldap.account = 
# the password of the account
pyshop.ldap.password = 
# the base DN 
# ex : ou=Customers, ou=Sales, o=anydomain.com
pyshop.ldap.bind_dn = 
# the filter with {username} for the place og the login field
# ex : (&(objectClass=inetOrgPerson)(uid={username})(o=anydomain.com))
pyshop.ldap.search_filter = 
# the scope of search in BASE SUBTREE ONELEVEL
pyshop.ldap.search_scope = 
# name of the atrribute where login is
# ex : uid
pyshop.ldap.login_attr = 
# name of the atrribute where login is
# ex : givenName
pyshop.ldap.first_name_attr = 
# name of the atrribute where login is
# ex : sn
pyshop.ldap.last_name_attr = 
# name of the atrribute where login is
# ex : mail
pyshop.ldap.email_attr = 

# Configure how the various bits of pyshop are authed against

# You can set these to any name as long as there's a corresponding
# name configured under pyshop.auth.methods

# Auth used for the web interface
pyshop.auth.web = session
# Auth used for the simple interface that pip uses
pyshop.auth.simple = basic

# Uncomment this if you've configured something other than basic auth
# for pyshop.auth.simple. distutils can't do anything other than basic
# so it's necessary to support basic auth for uploads even if you don't
# use it for installs
#pyshop.auth.upload = basic

# basic, session, and remote_user are default methods you can use.
# they're configured to behave like the pyshop defaults.

# Basic auth will validate against Ldap if you've configured it to,
# otherwise it will compare against the credentials in the local
# database. Configure ldap in the ldap section above.
pyshop.auth.methods.basic.type = basic

# AuthTktAuthenticationPolicy
# see http://pyramid.readthedocs.org/en/latest/api/authentication.html
# pyshop.auth.methods.session.secret replaces pyshop.cookie_key
pyshop.auth.methods.session.type = session
pyshop.auth.methods.session.secret = CHANGE-ME

# Use the remote_user auth policy if to deploy pyshop behind Apache
# while using Apache for authentication (e.g. for SSO)
pyshop.auth.methods.remote_user.type = remote_user
# Set this to your domain
pyshop.auth.methods.remote_user.email_domain = example.com
# If your SSO provides a server variable for the email, you can uncomment this
# and set it to the name of that variable
#pyshop.auth.methods.remote_user.email = EXAMPLE_EMAIL_KEY


[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 8000

# Begin logging configuration

[loggers]
keys = root, pyshop, sqlalchemy, urllib3

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_pyshop]
level = DEBUG
handlers =
qualname = pyshop

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[logger_urllib3]
level = WARN
handlers =
qualname = requests.packages.urllib3.connectionpool

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s

# End logging configuration
